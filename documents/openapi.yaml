openapi: 3.1.0
info:
  title: Slagg API Defennition
  version: 0.1.0
servers:
  - url: /
security:
  - BearerAuth: [User]
paths:
  /api/user:
    get:
      responses:
        '200':
          description: Returns all users the current User has access to.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserModel"
              examples:
                Users:
                  value:
                    -
                      userId: 69420
                      firstName: "Max"
                      lastName: "Mustermann"
                      email: "max.mustermann@example.com"
        '401':
          description: Returned when no login is detected.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseModel"
              examples:
                ErrorModel:
                  value:
                    ok: false
                    statusCode: 401
                    message: You are not logged in. Can't access any Users.
      deprecated: false
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserModel"
            examples:
              User:
                description: The requested User with the given `userId`.
                $ref: "#/components/examples/User"
      responses:
        '200':
          description: The update of the User succeeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseModel"
              examples:
                Success:
                  description: The update of the given User succeeded
                  value:
                    ok: true
                    statusCode: 200
                    message: "Updating User: `userId` was successfull"
        '401':
          description: The current User has no access to the requested User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseModel"
              examples:
                Unauthorized:
                  description: No access to the User `userId`
                  value:
                    ok: false
                    statusCode: 401
                    message: "You dont have access to the User: `userId`"
        '404':
          description: The User to update does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseModel"
              examples:
                NotFound:
                  description: The User `userId` was not found
                  value:
                    ok: false
                    statusCode: 404
                    message: "The User `userId` was not found"
      deprecated: false
    put:
      security:
        - BearerAuth: [Admin]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddUserModel"
            examples:
              User:
                description: The requested User with the given `userId`.
                value:
                  firstName: "Max"
                  lastName: "Mustermann"
                  email: "max.mustermann@example.com"
      '201':
        description: Adding the user was successfull
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserModel"
            examples:
              User:
                description: The requested User with the given `userId`.
                $ref: "#/components/examples/User"
      '401':
        description: No right to add a User
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResponseModel"
            examples:
              Unauthorized:
                description: The current User is not allowed to create new Users
                value:
                  ok: false
                  statusCode: 401
                  message: You are not allowed to create new Users.
      '409':
        description: Indicates that the User has already been created.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResponseModel"
            examples:
              Conflict:
                description: The User already exists
                value:
                  ok: false
                  statusCode: 409
                  message: The User already exists. If the intend was to update the User, use the HTTP-POST method.
      deprecated: false
  /api/user/{userId}:
    parameters:
      - name: userId
        in: path
        description: ID of the User to get
        required: true
        schema:
          type: number
        allowEmptyValue: false
    get:
      responses:
        '200':
          description: Gets the specified user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserModel"
              examples:
                User:
                  description: The requested User with the given `userId`.
                  $ref: "#/components/examples/User"
        '401':
          description: If the current user can't access the requested user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseModel"
              examples:
                ErrorModel:
                  description: The Error Model that is returned when the current User has no access to the requested User.
                  value: 
                    ok: false
                    statusCode: 401
                    message: "Requested User: {userId} is not accessible to the current User."
        '404':
          description: Is returned when the User with the given `userId` is not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseModel"
              examples:
                ErrorModel:
                  description: The Error Model that is returned when the User is not found.
                  value:
                    ok: false
                    statusCode: 404
                    message: "User: {userId} is not found."
      deprecated: false
    delete:
      security:
        - BearerAuth: [Admin]
      responses:
        '200':
          description: The User was deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseModel"
              examples:
                Success:
                  description: The User was deleted successfully
                  value:
                    ok: true
                    statusCode: 200
                    message: The User was deleted successfully
      '401': # TODO is this really nessecary? The authentication middleware should already catch this
        description: The current User is not allowed to delete other Users
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResponseModel"
            examples:
              Unauthorized:
                description: The current User is not allowed to delete other Users
                value:
                  ok: false
                  statusCode: 401
                  message: You are not allowed to delete this User
      '404':
        description: The User to delete was not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResponseModel"
            examples:
              NotFound:
                description: The User to delete was not found
                value:
                  ok: false
                  statusCode: 404
                  message: The User to delete was not found
      deprecated: false

  /api/user/password:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordModel"
            examples:
              ChangePasswordModel:
                description: The model used to change the password of the given user
                value:
                  userId: 69420
                  oldPassword: strongPassword
                  newPassword: verystrongPassword
      responses:
        '200':
          description: The password change was successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseModel"
              examples:
                Success:
                  description: The password change was successfull
                  value:
                    ok: true
                    statusCode: 200
                    message: The password change was successfull
        '401':
          description: If the current User is not allowed to change the password of the specified User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseModel"
              examples:
                Unauthorized:
                  description: The current USer is not allowed to change the password of the specified User
                  value:
                    ok: false
                    statusCode: 401
                    message: You are not allowed to change the password of the specified User
        '404':
          description: The specified User for which the password should be changed was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseModel"
              examples:
                NotFound:
                  description: The specified User was not found
                  value:
                    ok: false
                    statusCode: 404
                    message: The specified User was not found
      deprecated: false

  /api/user/setting:
    get:
      deprecated: false
    post:
      deprecated: false
    put:
      deprecated: false

  /api/user/setting/{settingId}:
    get:
      deprecated: false
    delete:
      deprecated: false

  /api/user/login:
    post:
      security: []
      deprecated: false
  /api/user/logout:
    post:
      deprecated: false

  /api/channel:
    get:
      deprecated: false
    put:
      deprecated: false
    delete:
      deprecated: false

  /api/channel/{channelId}:
    get:
      deprecated: false
    post:
      deprecated: false

components:
  schemas:
    UserModel:
      type: object
      required:
        - userId
        - firstName
        - lastName
        - email
      properties:
        userId:
          type: number
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        userName:
          type: string
    AddUserModel:
      type: object
      required:
        - firstName
        - lastName
        - email
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        userName:
          type: string
    ChangePasswordModel:
      type: object
      required:
        - userId
        - newPassword
        - oldPassword
      properties:
        userId:
          type: number
        newPassword:
          type: string
        oldPassword:
          type: string
    ResponseModel:
      type: object
      properties:
        ok:
          type: boolean
        statusCode:
          type: number
        message:
          type: string
  examples:
    User:
      value:
        userId: 69420
        firstName: "Max"
        lastName: "Mustermann"
        email: "max.mustermann@example.com"
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      name: Authorization
      description: The default authorization
